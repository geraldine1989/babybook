{ [Function: model]
  hooks:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  base:
   Mongoose {
     connections: [ [NativeConnection], [NativeConnection] ],
     models: { datas: [Circular], registered_parents: [Function] },
     modelSchemas: { datas: [Schema], registered_parents: [Schema] },
     options: { pluralization: true },
     _pluralize: [Function: pluralize],
     Schema:
      { [Function: Schema] reserved: [Object], Types: [Object], ObjectId: [Function] },
     model: [Function],
     plugins: [ [Array], [Array], [Array], [Array] ] },
  modelName: 'datas',
  model: [Function: model],
  db:
   NativeConnection {
     base:
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        Schema: [Function],
        model: [Function],
        plugins: [Array] },
     collections:
      { datas: [NativeCollection],
        registered_parents: [NativeCollection] },
     models: { datas: [Circular], registered_parents: [Function] },
     config: { autoIndex: true },
     replica: false,
     options: null,
     otherDbs: [],
     relatedDbs: {},
     states:
      [Object: null prototype] {
        '0': 'disconnected',
        '1': 'connected',
        '2': 'connecting',
        '3': 'disconnecting',
        '99': 'uninitialized',
        disconnected: 0,
        connected: 1,
        connecting: 2,
        disconnecting: 3,
        uninitialized: 99 },
     _readyState: 1,
     _closeCalled: false,
     _hasOpened: true,
     '$internalEmitter':
      EventEmitter { _events: [Object], _eventsCount: 1, _maxListeners: 0 },
     _listening: false,
     _connectionOptions:
      { useNewUrlParser: true, promiseLibrary: [Function: Promise] },
     name: 'babybook',
     host: 'localhost',
     port: 27017,
     user: undefined,
     pass: undefined,
     client:
      MongoClient {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        s: [Object],
        topology: [Server] },
     '$initialConnection': Promise { [Circular] },
     db:
      Db {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        s: [Object],
        serverConfig: [Getter],
        bufferMaxEntries: [Getter],
        databaseName: [Getter] } },
  discriminators: undefined,
  events:
   EventEmitter {
     _events: [Object: null prototype] {},
     _eventsCount: 0,
     _maxListeners: undefined },
  '$appliedMethods': true,
  '$appliedHooks': true,
  _middleware:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  schema:
   Schema {
     obj: [ [Object] ],
     paths:
      { email: [SchemaString],
        password: [SchemaString],
        accessCode: [SchemaString],
        baby: [DocumentArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths:
      { 'baby.0': [SchemaType],
        'baby.0._id': [ObjectId],
        'baby.0.identity': [DocumentArray],
        'baby.0.identity.0': [SchemaType],
        'baby.0.identity.0._id': [ObjectId],
        'baby.0.identity.0.id': [SchemaString],
        'baby.0.identity.0.firstname': [SchemaString],
        'baby.0.identity.0.lastname': [SchemaString],
        'baby.0.identity.0.birthdate': [SchemaString],
        'baby.0.health': [DocumentArray],
        'baby.0.phoneDatas': [DocumentArray],
        'baby.0.myDay': [DocumentArray],
        'baby.0.contacts': [DocumentArray] },
     virtuals: { id: [VirtualType] },
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     methodOptions: {},
     statics: {},
     tree:
      { email: [Function: String],
        password: [Function: String],
        accessCode: [Function: String],
        baby: [Array],
        _id: [Object],
        __v: [Function: Number],
        id: [VirtualType] },
     query: {},
     childSchemas: [ [Object] ],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     '$id': 1,
     s: { hooks: [Kareem] },
     _userProvidedOptions: {},
     options:
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [] },
  collection:
   NativeCollection {
     collection: Collection { s: [Object] },
     opts:
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'datas',
     collectionName: 'datas',
     conn:
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        '$internalEmitter': [EventEmitter],
        _listening: false,
        _connectionOptions: [Object],
        name: 'babybook',
        host: 'localhost',
        port: 27017,
        user: undefined,
        pass: undefined,
        client: [MongoClient],
        '$initialConnection': [Promise],
        db: [Db] },
     queue: [],
     buffer: false,
     emitter:
      EventEmitter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  Query:
   { [Function]
     base:
      Query {
        toConstructor: [Function: toConstructor],
        setOptions: [Function],
        collection: [Function: collection],
        collation: [Function],
        '$where': [Function],
        where: [Function],
        equals: [Function: equals],
        eq: [Function: eq],
        or: [Function: or],
        nor: [Function: nor],
        and: [Function: and],
        gt: [Function],
        gte: [Function],
        lt: [Function],
        lte: [Function],
        ne: [Function],
        in: [Function],
        nin: [Function],
        all: [Function],
        regex: [Function],
        size: [Function],
        maxDistance: [Function],
        minDistance: [Function],
        mod: [Function],
        exists: [Function],
        elemMatch: [Function],
        within: [Function: within],
        box: [Function],
        polygon: [Function],
        circle: [Function],
        near: [Function: near],
        intersects: [Function: intersects],
        geometry: [Function: geometry],
        select: [Function: select],
        slice: [Function],
        sort: [Function],
        limit: [Function],
        skip: [Function],
        maxScan: [Function],
        batchSize: [Function],
        comment: [Function],
        maxTimeMS: [Function],
        maxTime: [Function],
        snapshot: [Function],
        hint: [Function],
        j: [Function: j],
        slaveOk: [Function],
        setReadPreference: [Function],
        read: [Function],
        r: [Function],
        readConcern: [Function],
        tailable: [Function],
        w: [Function: writeConcern],
        writeConcern: [Function: writeConcern],
        wTimeout: [Function: wtimeout],
        wtimeout: [Function: wtimeout],
        merge: [Function],
        find: [Function],
        cursor: [Function: cursor],
        findOne: [Function],
        count: [Function],
        distinct: [Function],
        update: [Function: update],
        updateMany: [Function: updateMany],
        updateOne: [Function: updateOne],
        replaceOne: [Function: replaceOne],
        remove: [Function],
        deleteOne: [Function],
        deleteMany: [Function],
        findOneAndUpdate: [Function],
        findOneAndDelete: [Function],
        findOneAndRemove: [Function],
        _findAndModify: [Function],
        _wrapCallback: [Function],
        setTraceFunction: [Function],
        exec: [Function: exec],
        thunk: [Function],
        then: [Function],
        stream: [Function],
        selected: [Function: selected],
        selectedInclusively: [Function: selectedInclusively],
        selectedExclusively: [Function: selectedExclusively],
        _mergeUpdate: [Function],
        _optionsForExec: [Function],
        _fieldsForExec: [Function],
        _updateForExec: [Function],
        _ensurePath: [Function],
        _validate: [Function] } },
  '$__insertMany': [Function],
  '$init': Promise { [Circular] },
  '$caught': true,
  [Symbol(mongoose#Model)]: true }
